}
games <- function(T1 = 1000, m1, m2, sig = 10, g = 10){
#m<- readline("Do you want to show you all possible results?[Yes/No]: ")
#mm<- readline( "Do you want to show you all possible differences?[Yes/No]: ")
# a)
# produce random numbers
X <- rnorm(T1, m1, sig)
Y <- rnorm(T1, m2, sig)
# b)
X <- round(X)
Y <- round(Y)
# c)
if ((m1 < 40 | m1 > 130) | (m2 < 40 | m2 > 130)){
stop('m values are not acceptable. Should be 40 < m < 130')
}
# Calculate probabilities
p_vic <- sum(X>Y)/T1
#k <- which(X>Y); pv <- length(k)/T1
p_isop <- sum(X==Y)/T1
#k <- which(X==Y); pd <- length(k)/T1
p_loss <- sum(X<Y)/T1
#k <- which(X<Y); pl <- length(k)/T1
# Print results
#cat(sprintf("Pithanotites nikhs ths A: %.3f", p_vic), '\n')
#cat(sprintf("Pithanotites isopalias ths A: %.3f", p_isop), '\n')
#cat(sprintf("Pithanotites httas ths A: %.3f", p_loss), '\n')
#d) 1000 times diaforwn agwnwn
Z <- X-Y
#e)
# frequency table (only for integer values)
Freqs <- table(Z)
# st)
p_xy <- sum(X+Y>g)/T1
return(list("p_victory"=p_vic, "p_isop"=p_isop, "p_loss"=p_loss, "Z"= Z, Pg"=p_xy))
}
games(m1 = 70, m2 = 67.7, g = 5)
out = games(m1 = 70, m2 = 67.7, g = 5)
out$p_loss
games <- function(T1 = 1000, m1, m2, sig = 10, g = 10){
#m<- readline("Do you want to show you all possible results?[Yes/No]: ")
#mm<- readline( "Do you want to show you all possible differences?[Yes/No]: ")
# a)
# produce random numbers
X <- rnorm(T1, m1, sig)
Y <- rnorm(T1, m2, sig)
# b)
X <- round(X)
Y <- round(Y)
# c)
if ((m1 < 40 | m1 > 130) | (m2 < 40 | m2 > 130)){
stop('m values are not acceptable. Should be 40 < m < 130')
}
# Calculate probabilities
p_vic <- sum(X>Y)/T1
#k <- which(X>Y); pv <- length(k)/T1
p_isop <- sum(X==Y)/T1
#k <- which(X==Y); pd <- length(k)/T1
p_loss <- sum(X<Y)/T1
#k <- which(X<Y); pl <- length(k)/T1
# Print results
#cat(sprintf("Pithanotites nikhs ths A: %.3f", p_vic), '\n')
#cat(sprintf("Pithanotites isopalias ths A: %.3f", p_isop), '\n')
#cat(sprintf("Pithanotites httas ths A: %.3f", p_loss), '\n')
#d) 1000 times diaforwn agwnwn
Z <- X-Y
#e)
# frequency table (only for integer values)
Freqs <- table(Z)
# st)
p_xy <- sum(X+Y>g)/T1
return(list("p_victory"=p_vic, "p_isop"=p_isop, "p_loss"=p_loss, "Z"= Z, "Pg"=p_xy))
}
out = games(m1 = 70, m2 = 67.7, g = 5)
out$Z
games(m1 = 70, m2 = 67.7, g = 5)
x=2
x^(1:5)
x^[1:5]
p <- seq(1,6)
x^p
x<-c(1,2,3,0,0,0)
all(x==0)
y<-c(1,2,3,0,0,1)
all(x==y)
y<-c(1,2,3,0,0,0)
all(x==y)
set.seed(123)
final <- kmeans(df, 4, nstart = 25)
print(final)
set.seed(123)
library(kohonen)
install.packages("kohogen")
install.packages("kohonen")
x<-runif(100)
y<-runif(100)
x11();plot(x,y)
data_train_matrix <- as.matrix(cbind(x,y))
data_train_matrix
# Create the SOM Grid - you generally have to specify the size of the
# training grid prior to training the SOM. Hexagonal and Circular
# topologies are possible
som_grid <- somgrid(xdim = 2, ydim=3, topo="hexagonal")
library(kohonen)
# Create the SOM Grid - you generally have to specify the size of the
# training grid prior to training the SOM. Hexagonal and Circular
# topologies are possible
som_grid <- somgrid(xdim = 2, ydim=3, topo="hexagonal")
som_model <- som(data_train_matrix, som_grid)
som_model
plot(som_model, type="changes")
x11();plot(som_model, type="changes")
x11();plot(som_model, type='property', property = var_unscaled, main=names(my_data_matrix)[var], palette.name=coolBlueHotRed)
x11();plot(som_model, type='property', property = var_unscaled, main=names(data_train_matrix)[var], palette.name=coolBlueHotRed)
x11();plot(som_model, type='property', property = var_unscaled,
=names(data_train_matrix)[var])
x11();plot(som_model, type='property', property = var_unscaled,
main=names(data_train_matrix)[var])
x11();plot(som_model, type='property',
main=names(data_train_matrix)[var])
sample.size <- 100
## generate dataframe of random RGB vectors
data <- as.data.frame(matrix(nrow = sample.size, ncol = 2))
colnames(data) <- c('Χ', 'Υ', 'Ζ')
data$Χ <- sample(1:100, sample.size, replace = T)
data$Υ <- sample(1:100, sample.size, replace = T)
library(kohonen)
grid.size <- 5
som.grid <- somgrid(xdim = grid.size, ydim = grid.size, topo = 'hexagonal', toroidal = T)
som.model <- som(data.matrix(data), grid = som.grid)
sample.size <- 100
## generate dataframe of random RGB vectors
data <- as.data.frame(matrix(nrow = sample.size, ncol = 2))
colnames(data) <- c('Χ', 'Υ', 'Ζ')
colnames(data) <- c('Χ', 'Υ')
data$Χ <- sample(1:100, sample.size, replace = T)
data$Υ <- sample(1:100, sample.size, replace = T)
library(kohonen)
data$Χ <- sample(1:100, sample.size, replace = T)
data
data$Χ <- runif(100, replace = T)
## generate dataframe of random RGB vectors
data <- as.data.frame(matrix(nrow = sample.size, ncol = 2))
data
colnames(data) <- c('Χ', 'Υ')
data
head(data)
colnames(data) <- c('X', 'Y')
head(data)
data$X <- runif(100, replace = T)
data$Y <- runif(100, replace = T)
data$X <- runif(100)
data$Y <- runif(100)
library(kohonen)
grid.size <- 5
som.grid <- somgrid(xdim = grid.size, ydim = grid.size, topo = 'hexagonal', toroidal = T)
som.model <- som(data.matrix(data), grid = som.grid)
som.model$unit.classif
nmc <- 5
mc <- ConsensusClusterPlus(t(som.model$codes), maxK = nmc, reps = 100,
pItem = 0.9, pFeature = 1, title = plot_outdir, plot = "png",
clusterAlg = "hc", innerLinkage = "average", finalLinkage = "average",
distance = "euclidean", seed = 1234)
library(ConsensusClusterPlus)
install.packages("ConsensusClusterPlus")
library(ConsensusClusterPlus)
install.packages("ConsensusClusterPlus")
som.model$codes
library(kohonen)
grid.size_x <- 3
grid.size_y <- 2
som.grid <- somgrid(xdim = grid.size_x, ydim = grid.size_y, topo = 'hexagonal', toroidal = T)
som.model <- som(data.matrix(data), grid = som.grid)
som.model$unit.classif
setwd("~/GitHubs/movCLUfish_new/R")
fi= read.mat('import_fish_tracks.mat')
# [3] Politikos, D.V., Kleftogiannis, D., Tsiaras, K., Rose K. 2020. MovCLUFish: A data mining
# tool for discovering novel fish movement patterns from individual-based models.
# -------------------------------------------------------------------------
# Written by:
# Dimitrios Politikos
# Helelnic Centre for Marine Research - HCMR
# October 2020
# dimpolit@hcmr.gr
# -------------------------------------------------------------------------
# Libraries
library(R.matlab)
fi= read.mat('import_fish_tracks.mat')
fi= readMat('import_fish_tracks.mat')
fi
names(fi)
dim(fi$fish.lon)
x <- runif(100)
y <- runif(100)
xy <- cbind(x,y)
xy
data.matrix(xy)
library(kohonen)
grid.size_x <- 3
grid.size_y <- 2
som.grid <- somgrid(xdim = grid.size_x, ydim = grid.size_y, topo = 'hexagonal', toroidal = T)
som.model <- som(data.matrix(xy), grid = som.grid)
som.model$unit.classif
dim(fi$fish.lon)
classes= som.model$unit.classif
classes
silhouette(classes)
install.packages("cluster")
library(cluster)
silhouette(classes)
silhouette(classes, dist(data.matrix(xy), "canberra"))
ss =silhouette(classes, dist(data.matrix(xy), "canberra"))
names(ss)
ss =silhouette(classes, dist(data.matrix(xy), "canberra"))
ss
View(ss)
str(ss)
ss.summary
data.matrix(xy)
ss<- silhouette(classes, dist(data.matrix(xy), "canberra"))
ss.summary
ss
summary(ss)
mean(ss)
ss<- silhouette(classes, dist(data.matrix(xy))
0
ss<- silhouette(classes, dist(data.matrix(xy)))
SS
ss
x11();plot(ss)
type(ss)
ss
summary(ss)
mean(ss[,3])
ss
summary(ss)
mean(ss[,3])
length(8-2)
numeric(1,10)
print('Processing time:  %d - %d', tstart,tfinish);
print('Processing time:  %d - %d', 1,10);
tstart=1
tfinish=10
print(paste0('Processing time:', tstart,tfinish));
print(paste0('Processing time %d %d:', tstart,tfinish));
print(paste0('Processing time %s, %s:', tstart,tfinish));
sprintf('Processing time %s, %s:', tstart,tfinish));
sprintf('Processing time %s, %s:', tstart,tfinish);
sprintf("Time: ", itime)
itime = 100
sprintf("Time: ", itime)
sprintf("Time: %s", itime)
matrix(0, 10, 2)
m<-matrix(0, 10, 2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
fi= readMat('import_fish_tracks.mat')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
fi= readMat('import_fish_tracks.mat')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
out
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
out
out$centroids_lon
source('~/GitHubs/movCLUfish_new/R/tmc.r')
source('~/GitHubs/movCLUfish_new/R/tmc.r')
dir()
sprintf('Processing time: %s, %s', tstart,tfinish);
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
out
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
printf(paste("Time:", itime)
day <- cbind(x[,itime], y[,itime])
som.grid <- somgrid(xdim = N, ydim = M, topo = 'hexagonal', toroidal = T)
som.model <- som(data.matrix(day), grid = som.grid)
classes = som.model$unit.classif
# compute silouhette coefficient
sil_day <- silhouette(classes, dist(data.matrix(day)))
SILAV = mean(sil_day[,3]);
sil_time[itime] = SILAV;
# retrieve the cluster centroids and store them in a separate matrix
class_centers = matrix(0, number_of_clusters, 2);
all_ctrs = matrix(0,number_of_clusters*time_duration, 2)
for (k in seq(1,number_of_clusters)){
temp_class = which(classes == k)
temp = day[temp_class,]
class_centers[k,1] = median(temp[,1])
class_centers[k,2] = median(temp[,2])
# Produced centroids
all_ctrs[j+k-1,] = class_centers[k,]
}
j = j+ N*M;
} # end of for loop
######  Perform centroids clustering ##########
#Remove centroids with NaNs
#all_ctrs(any(isnan(all_ctrs),2),:) = [];
# Apply SOM on centroids
som.grid <- somgrid(xdim = N, ydim = M, topo = 'hexagonal', toroidal = T)
som.model <- som(data.matrix(all_ctrs), grid = som.grid)
cidxC = som.model$unit.classif
# Compute the centroids of each cluster
ctrsC_x <- list() #matrix(0, number_of_clusters,2)
ctrsC_y <- list() #matrix(0, number_of_clusters,2)
for (k in seq(1,number_of_clusters)){
temp_class = which(cidxC == k);
temp = all_ctrs[temp_class,]
print(temp)
ctrsC_x < append(ctrsC_x, 1) #temp[,1])
ctrsC_y < append(ctrsC_y, 2) #temp[,2])
}
# Outputs
centroids_x = ctrsC_x
centroids_y = ctrsC_y
sil = sil_time;
return(list("centroids_lon" = centroids_x, "centroids_lat" = centroids_y, "silhouette" = sil))
}
printf(paste("Time:", itime))
print(paste("Time:", itime))
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
print(paste("Processing time: ", tstart,tfinish))
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
# Compute the centroids of each cluster
ctrsC_x <- () #matrix(0, number_of_clusters,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
x=seq(1,20)
median(x)
mean(x)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
out
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 10, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
source('~/GitHubs/movCLUfish_new/R/tmc.r')
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
out
out$centroids
out$centroids[1]
out$centroids[,1]
c(k, temp[s,1], temp[s,2])
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
x<-1:3
y<-4:7
ct <- c()
ct <- c(ct,x)
ct
ct <- c(ct,y)
ct
ct <- c()
ct <- rbind(ct,y)
ct
y<-4:6
ct <- c()
ct <- rbind(ct,c)
ct <- rbind(ct,x)
ct
ct <- rbind(ct,y)
ct
t <-c(0,0,0)
ct <- rbind(ct,t)
ct
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
source('~/GitHubs/movCLUfish_new/R/tmc.r')
out = tmc(fi$fish.lon, fi$fish.lat, 1, 5, 3,2)
out
visualize_tmc(out$centroids, out$silhouette, 3, 2)
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
visualize_tmc(out$centroids, out$silhouette, 3, 2)
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
visualize_tmc(out$centroids, out$silhouette, 3, 2)
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
visualize_tmc(out$centroids, out$silhouette, 3, 2)
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
visualize_tmc(out$centroids, out$silhouette, 3, 2)
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
visualize_tmc(out$centroids, out$silhouette, 3, 2)
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
visualize_tmc(out$centroids, out$silhouette, 3, 2)
source('~/GitHubs/movCLUfish_new/R/visualize_tmc.r')
visualize_tmc(out$centroids, out$silhouette, 3, 2)
getwd()
install.packages("aplpack")
library(aplpack)
x<-runif(100); y<-runif(100)
b <- cbind(x, y)
bagplot(b)
x11();bagplot(b)
n <- bagplot(b)
n
str(b)
source('~/GitHubs/movCLUfish_new/R/amc.r')
b
n <- bagplot(b)
library(aplpack)
n <- bagplot(b)
n$pxy.bag
library(pracma)
install.packages("pracma")
library(pracma)
x
abs(polyarea(x,y))
n$hull.bag[,1]
n$hull.bag
n$hull.bag.asmatrix
type(n$hull.bag)
n$hull.bag
n$hull.bag[1]
n$hull.bag[,1]
n$hull.bag[1,]
n$hull.bag[1][1]
n$hull.bag[1][2]
n$hull.bag[1]
n$hull.bag[2]
n$hull.bag[3]
n$hull.bag[1,]
n$hull.bag[2,]
n$hull.bag[1,1]
n$hull.bag[1,2]
n$hull.bag
n$hull.bag[,1]
n$hull.bag[,2]
mean(n$hull.bag[,2])
source('~/GitHubs/movCLUfish_new/R/amc.r')
source('~/GitHubs/movCLUfish_new/R/amc.r')
bag_area = amc(fi$fish.lon, fi$fish.lat,1,10,3,2)
bag_area = amc(fi$fish.lon, fi$fish.lat,1,300,3,2)
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
viualize_amc(fi$fish.lon, fi$fish.lat,1,3,2)
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
library(R.matlab)
fi= readMat('import_fish_tracks.mat')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/tmc.r')
source('~/GitHubs/movCLUfish_new/R/amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
source('~/GitHubs/movCLUfish_new/R/visualize_amc.r')
